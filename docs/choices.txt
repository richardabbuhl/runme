Copyright (c) 2005 Richard Abbuhl.
Haarlem, The Netherlands.
All rights reserved.

Overview

This files describes the significant design choices I made during development of this project. It details the problems
I perceived, the issues surrounding them, my value judgments, and the decisions that I made to resolve these issues.
This document should also describe any uncertainties I had regarding the project, and the decisions I made when
resolving them.

Database Issues

I was not sure how to access the records in the file.  By default, I choose the DataAccessStream but it does not allow
seeking within the file.  Instead, I choose RandomAccessFile since seeks are necessary to read/write files.

For performance reasons, I seemed necessary to cache the schema.  I created a Schema class and the schema is read and
in saved so it can be used when future database accesses are requested.

I choose to use a HashMap for holding the locking information to lock the database using cookies.  To test locking, I
wrote a test program with 20 threads that accessed the database simulatenously and no deadlocks occurred.

To support RMI, The DB class was modified so that it extended the Remote class so that it can support local or remote
usage.  An instance of the Data class can be instantiated for local database usage or an instance of the RemoteData
class can be instantiated for remote database usage.

GUI Issues

The user interface was designed to provide only limited functionality.  It allows the user to view all records, to view
records matching the first letters of the subcontractor name or city, and allows the user the user to modify a record.
It was chosen not to allow the user to delete a record.  It was difficult to decide how to allow editing and after some
research it seemed the best way to accomplish this was editing using a JTable.  However, there are some Swing issues
related to editing so I choose to use a text box and button to edit the customer holding.  This was the simpliest and
best approach for usability.  For DB configurtion, a menu item was added so that a dialog could be used to update
the DB configuration information.

Dirty Updates

If two users are remotely accessing the database, it is possible that the first user updates the customer holding but
the second user does not yet see the change.  The second user can then try to update the same record and would overwrite
the changes from the first user.  This is dealt with during an update by reading the value of customer holding from the
database and comparing it against the current value of customer holding.  If the two are different the user updating the
record is given the choice to abort the update or to overwrite the record.  This is done without holding a lock to the
record to prevent deadlocks if the user does not respond.  During the actual update of the record a lock is requested
so that the update is protected.  However, during the time between presenting the choice to the user and the update of
the record if the user chooses to continue an update could also have occurred.  This could be solved by getting a lock
and again reading the value of customer holding from the database and comparing it against the current value of customer
holding.  If the two are different then the update should be aborted and reported to the user as an update conflict.
However, this second check was not implemented.  Also, it was decided not to get a lock and then query the user since
another user could be locked from the record during the time that a responce must be entered by the user.

RMI Implementation

I did some quick research and RMI seemed to be the best and easiest choice for remote access to the database.  Some
documentation indicated, for instance, "that sockets require the client and server to engage in applications-level
protocols to encode and decode messages for exchange, and the design of such protocols is cumbersome and can be
error-prone" so it was easy to make the choice for RMI.

I order to support local and remote DB access, I modified the DB class that that it extended the Remote class.  It
was relatively easy to implement remote usage by extending the UnicastRemoteObject object.  It did take some work to
figure out how to use the rmi compiler but once that was done the rest was easy.  It also seems logical that the
DB interface may throw exceptions that may occur when connected either locally or remotely.  Since it is unknown
except at run-time whether these database is local or remote the interface dictates all of the possible exceptions
(and errors) that may occur.

Exception Handling

For the DB interface, it was difficult to implement proper exception handling.  All of the interfaces were initially
defined to throw certain exceptions and it seemed that IOException should be added although it would have been nicer
to define a generic exception like DatabaseErrorException.  Using DatabaseErrorException, it would then have been
necessary to catch IOException and to re-throw DatabaseErrorException instead for the Data class methods.  Also,
the RemoteData class methods already need to throw RemoteException (which extends IOException) and yet IOException
is on the list of exceptions.