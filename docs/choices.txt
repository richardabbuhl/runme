Copyright (c) 2005 Richard Abbuhl.
Haarlem, The Netherlands.
All rights reserved.

Overview

This files describes the significant design choices I made during development of this project. It details the problems
I perceived, the issues surrounding them, my value judgments, and the decisions that I made to resolve these issues.
This document should also describe any uncertainties I had regarding the project, and the decisions I made when
resolving them.

Database Issues

I was not sure how to access the records in the file.  By default, I choose the DataAccessStream but it does not allow
seeking within the file.  Instead, I choose RandomAccessFile since seeks are necessary to read/write files.

For performance reasons, I seemed necessary to cache the schema.  I created a Schema class and the schema is read and
in saved so it can be used when future database accesses are requested.

I choose to use a HashMap for holding the locking information to lock the database using cookies.  To test locking, I
wrote a test program with 20 threads that accessed the database simulatenously and no deadlocks occurred.

To support RMI, The DB class was modified so that it extended the Remote class so that it can support local or remote
usage.  An instance of the Data class can be instantiated for local database usage or an instance of the RemoteData
class can be instantiated for remote database usage.

GUI Issues

The user interface was designed to provide only limited functionality.  It allows the user to view all records, to view
records matching the first letters of the subcontractor name or city, and allows the user the user to modify a record.
It was chosen not to allow the user to delete a record. 

RMI Implementation

I did some quick research and RMI seemed to be the best and easiest choice for remote access to the database.  Some
documentation indicated, for instance, "that sockets require the client and server to engage in applications-level
protocols to encode and decode messages for exchange, and the design of such protocols is cumbersome and can be
error-prone."

I order to support local and remote DB access, I modified the DB class that that it extended the Remote class.  It
was relatively easy to implement remote usage by extending the UnicastRemoteObject object.  It did take some work to
figure out how to use the rmi compiler but once that was done the rest was easy.
